#!/usr/bin/python

import PluginLoader
import urllib
import urllib2
import ConfigParser

config = ConfigParser.RawConfigParser()

#change to correct folder.
config.read(['/home/Omnik-Data-Logger/config-default.cfg', '/home/Omnik-Data-Logger/config.cfg'])

domoticz_host    = config.get('domoticz','domoticz_host')
domoticz_port    = config.get('domoticz','domoticz_port')
domoticz_url     = config.get('domoticz','domoticz_url')

idx_Temp = config.get('domoticz','idx_Temp')
idx_PV1_U = config.get('domoticz','idx_PV1_U')
idx_PV2_U = config.get('domoticz','idx_PV2_U')
idx_PV1_A = config.get('domoticz','idx_PV1_A')
idx_PV2_A = config.get('domoticz','idx_PV2_A')
idx_AC_Output = config.get('domoticz','idx_AC_Output')
idx_E_Total = config.get('domoticz','idx_E_Total')
idx_E_Current = config.get('domoticz','idx_E_Current')
url = ("http://" + domoticz_host + ":" + domoticz_port + "/" + domoticz_url)

class DomoticzOutput(PluginLoader.Plugin):
    """Outputs the data from the Omnik inverter to Domoticz"""

    def process_message(self, msg):
        """Output the information from the inverter to Domoticz.

        Args:
            msg (InverterMsg.InverterMsg): Message to process
        """

        #Total AC energy generated by inverter in kWatt
        get_data = {
                'svalue': msg.e_total,
                'type': 'command',
                'param': 'udevice',
                'idx' : idx_E_Total
                }
        get_data_encoded = urllib.urlencode(get_data)
        full_url = url + '?' + get_data_encoded
        urllib.urlopen(full_url)

        #Current AC power and today's total power
        get_data = {
                'svalue': str(msg.p_ac(1)) + ';' + str(msg.e_total * 1000),
                'type': 'command',
                'param': 'udevice',
                'idx' : idx_E_Current,
                'nvalue': '0'
                }
        get_data_encoded = urllib.urlencode(get_data)
        full_url = url + '?' + get_data_encoded
        urllib.urlopen(full_url)

        #Current inverter temperature
        if msg.temperature < 300: #inverter displays temperature of +/- 6352 degrees Celcius when not generating power
                get_data = {
                        'svalue': msg.temperature,
                        'type': 'command',
                        'param': 'udevice',
                        'idx' : idx_Temp,
                        'nvalue': '0'
                        }
                get_data_encoded = urllib.urlencode(get_data)
                full_url = url + '?' + get_data_encoded
                urllib.urlopen(full_url)

        #String 1 voltage
        get_data = {
                'svalue': msg.v_pv(1),
                'type': 'command',
                'param': 'udevice',
                'idx' : idx_PV1_U,
                'nvalue': '0'
                }
        get_data_encoded = urllib.urlencode(get_data)
        full_url = url + '?' + get_data_encoded
        urllib.urlopen(full_url)

        #String 2 voltage
        get_data = {
                'svalue': msg.v_pv(2),
                'type': 'command',
                'param': 'udevice',
                'idx' : idx_PV2_U,
                'nvalue': '0'
                }
        get_data_encoded = urllib.urlencode(get_data)
        full_url = url + '?' + get_data_encoded
        urllib.urlopen(full_url)

        #String 1 ampere
        get_data = {
                'svalue': msg.i_pv(1),
                'type': 'command',
                'param': 'udevice',
                'idx' : idx_PV1_A,
                'nvalue': '0'
                }
        get_data_encoded = urllib.urlencode(get_data)
        full_url = url + '?' + get_data_encoded
        urllib.urlopen(full_url)

        #String 2 ampere
        get_data = {
                'svalue': msg.i_pv(2),
                'type': 'command',
                'param': 'udevice',
                'idx' : idx_PV2_A,
                'nvalue': '0'
                }
        get_data_encoded = urllib.urlencode(get_data)
        full_url = url + '?' + get_data_encoded
        urllib.urlopen(full_url)

        #Current AC current
        get_data = {
                'svalue': msg.i_ac(1),
                'type': 'command',
                'param': 'udevice',
                'idx' : idx_AC_Output,
                'nvalue': '0'
                }
        get_data_encoded = urllib.urlencode(get_data)
        full_url = url + '?' + get_data_encoded
        urllib.urlopen(full_url)